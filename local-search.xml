<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基本语法_js</title>
    <link href="/2020/08/25/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-js/"/>
    <url>/2020/08/25/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-js/</url>
    
    <content type="html"><![CDATA[<h1 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h1><h2 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1.输入输出"></a>1.输入输出</h2><ul><li>输入：  <pre><code class="hljs awk">prompt();<span class="hljs-regexp">//</span>字符串输入  +prompt();<span class="hljs-regexp">//</span>数字输入</code></pre></li><li>输出：  <pre><code class="hljs awk">alert();<span class="hljs-regexp">//</span>警告框输出document.write();<span class="hljs-regexp">//</span>body中输出console.log();<span class="hljs-regexp">//</span>控制台输出</code></pre></li></ul><h2 id="2-数据类型与转换"><a href="#2-数据类型与转换" class="headerlink" title="2.数据类型与转换"></a>2.数据类型与转换</h2><p>可以通过<code>typeof + 变量名</code>检查变量的数据类型</p><ul><li>String 字符串  <table><thead><tr><th align="left">说明</th><th align="left">用单引号或双引号引起来，但不能混用，不能同一嵌套</th></tr></thead><tbody><tr><td align="left">特殊符号</td><td align="left">&quot; = “</td></tr><tr><td align="left"></td><td align="left">&#39; = ‘</td></tr><tr><td align="left"></td><td align="left">\n = 换行</td></tr><tr><td align="left"></td><td align="left">\t = 制表符</td></tr><tr><td align="left"></td><td align="left">\ = \</td></tr><tr><td align="left">强制类型转换</td><td align="left">toString()方法：<code>a = a.toString();</code></td></tr><tr><td align="left"></td><td align="left">String()函数：<code>a = String(a);</code></td></tr></tbody></table></li></ul><ul><li><p>Number 数值  </p><table><thead><tr><th align="left">说明</th><th align="left">js中所有数值都为Number类型，包括整数和浮点数</th></tr></thead><tbody><tr><td align="left">强制类型转换</td><td align="left">Number()函数：<code> a = Number(a);</code></td></tr><tr><td align="left"></td><td align="left">String()函数：<code>a = String(a);</code></td></tr><tr><td align="left"></td><td align="left">parseInt()函数，转为整数：<code>a = parseInt(a);</code></td></tr><tr><td align="left"></td><td align="left">parseFloat()函数，转为整数：<code>a = parseFloat(a);</code></td></tr><tr><td align="left"></td><td align="left">true = 1, false = 0, Null = 0，undefined = NaN</td></tr><tr><td align="left">其他进制</td><td align="left">以0x开头表示16进制数字</td></tr><tr><td align="left"></td><td align="left">以0开头为8进制数字</td></tr></tbody></table></li><li><p>Boolean 布尔值  </p><table><thead><tr><th align="left">说明</th><th align="left">布尔值表示逻辑判断,true 表示真,false 表示假</th></tr></thead><tbody><tr><td align="left">Boolean()函数类型转换</td><td align="left">Number 除了 0 和 NaN ，其他都为true</td></tr><tr><td align="left"></td><td align="left">String 除了空串，其他都是true</td></tr><tr><td align="left"></td><td align="left">Null 和 Undefined 都是false</td></tr><tr><td align="left"></td><td align="left">Object 转换为true</td></tr></tbody></table></li><li><p>Null 空值  </p><blockquote><p>Null类型的值就只有一个，就是null,表示第一个空对象,typeof检查null时，会返回object</p></blockquote></li><li><p>Undefined 未定义</p><blockquote><p>Undefined(未定义) 类型的值只有一个，就是undefind,当声明一个变量，但并不给变量赋值是，它的值就是undefined,typeof检查undefined，会返回undefined</p></blockquote></li><li><p>Object 对象  </p></li></ul><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h2><ul><li><p>一元运算符  </p><blockquote><p>自增：自身基础上增加1 ,自增后，值立即自增1,分为两种：a++ 和 ++a</p><pre><code>  var a = 1;  a++ = 1;  ++a = 2;    //a++ 和 ++a 的值不同  a = 2;  </code></pre><p>自减同上</p></blockquote></li><li><p>逻辑运算符  </p><ul><li><p>!非：  </p><blockquote><p>一个值进行非运算 对一个布尔值进行取反操作，true –&gt; flase</p></blockquote></li><li><p>&amp;&amp;与：  </p><blockquote><p> &amp;&amp;与：可以对符号两侧的值进行与运算；<br>只有两端的值都为true时，才会返回true。只要有一个false就会返回false；<br>与是一个短路的与，如果第一个值是false，则不再检查第二个值；<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值；<br>规则：<br>1.第一个值为false，则返回第一个值；<br>2.如果第一个值为true，则返回第二个值。 </p></blockquote></li><li><p>||或：  </p><blockquote><p> 可以对符号两侧的值进行或运算；<br>只有两端都是false时，才会返回false。只要有一个true，就会返回true；<br>或是一个短路的或，如果第一个值是true，则不再检查第二个值；<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值；<br>规则：<br>1.如果第一个值为true，则返回第一个值；<br>2.如果第一个值为false，则返回第二个值。  </p></blockquote></li></ul></li><li><p>赋值运算符  </p><table><thead><tr><th align="left">赋值运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">可以将符号右侧的值赋值给左侧变量</td></tr><tr><td align="left">+=</td><td align="left">a += 5; 相当于 a = a+5; 可连接字符串</td></tr><tr><td align="left">-=</td><td align="left">a -= 5  相当于 a = a-5</td></tr><tr><td align="left">其他类似</td><td align="left">……</td></tr></tbody></table></li><li><p>关系运算符  </p><table><thead><tr><th align="left"></th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">符号</td><td align="left">&gt; &lt; &gt;= &lt;=</td></tr><tr><td align="left"></td><td align="left">比较两个值之间的关系，如果关系成立则返回true，关系不成立则返回false。</td></tr><tr><td align="left"></td><td align="left">如果比较的两个值是非数值，会将其转换为Number然后再比较。</td></tr><tr><td align="left"></td><td align="left">如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。</td></tr></tbody></table></li><li><p>相等运算符  </p><table><thead><tr><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false (相等会自动对两个值进行类型转换，如果对不同的类型进行比较，会将其转换为相同的类型然后再比较，转换后相等它也会返回true。)</td></tr><tr><td align="left">!=</td><td align="left">不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false (不等也会做自动的类型转换。)</td></tr><tr><td align="left">===</td><td align="left">全等，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换 (如果两个值的类型不同，则直接返回false)</td></tr><tr><td align="left">!==</td><td align="left">不全等，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true</td></tr><tr><td align="left">特殊的值</td><td align="left">由于undefined衍生自null，所以null == undefined 会返回true。但是 null === undefined 会返回false。</td></tr><tr><td align="left"></td><td align="left">NaN不与任何值相等，报告它自身 NaN == NaN 返回false</td></tr><tr><td align="left"></td><td align="left">判断一个值是否是NaN，使用isNaN()函数</td></tr></tbody></table></li><li><p>三元运算符 ?  </p><blockquote><p>语法：条件表达式?语句1:语句2;<br>  执行流程：</p><blockquote><p>先对条件表达式求值判断;<br>   如果判断结果为true，则执行语句1，并返回执行结果<br>   如果判断结果为false，则执行语句2，并返回执行结果  </p></blockquote></blockquote></li><li><p>运算符优先级  </p><blockquote><p>和数学中一样，JS中的运算符也是具有优先级的，比如 先乘除 后加减 先与 后或;<br>  具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>  优先级越高的越优先计算，优先级相同的，从左往右计算。<br>  优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。  </p></blockquote></li></ul><h2 id="4-流程控制语句"><a href="#4-流程控制语句" class="headerlink" title="4.流程控制语句"></a>4.流程控制语句</h2><p>程序都是自上向下的顺序执行的，通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。  </p><ul><li>if（条件判断语句） <pre><code class="hljs lasso"><span class="hljs-keyword">if</span>(条件表达式)&#123;      语句<span class="hljs-params">...</span>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式)&#123;      语句<span class="hljs-params">...</span>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式)&#123;      语句<span class="hljs-params">...</span>  &#125;<span class="hljs-keyword">else</span>&#123;      语句<span class="hljs-params">...</span>  &#125;<span class="hljs-comment">//自上到下判断</span></code></pre></li><li>switch（条件分支语句）  <pre><code class="hljs autoit"><span class="hljs-keyword">switch</span>(条件表达式)&#123;      <span class="hljs-keyword">case</span> 表达式:          语句...          <span class="hljs-built_in">break</span><span class="hljs-comment">;</span>      <span class="hljs-keyword">case</span> 表达式:          语句...          <span class="hljs-built_in">break</span><span class="hljs-comment">;</span>      <span class="hljs-keyword">default</span>:          语句...          <span class="hljs-built_in">break</span><span class="hljs-comment">;</span>  &#125;//依次将 <span class="hljs-keyword">case</span>后的表达式的值 和 <span class="hljs-keyword">switch</span>后的表达式的值 进行 全等比较</code></pre></li><li>while 循环  <pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(条件表达式)</span></span>&#123;语句...&#125;<span class="hljs-comment">//先判断再循环</span></code></pre></li><li>do while 循环  <pre><code class="hljs awk"><span class="hljs-keyword">do</span>&#123; 语句...&#125;<span class="hljs-keyword">while</span>(条件表达式)<span class="hljs-regexp">//</span>先判断再循环，至少循环一次</code></pre></li><li>for 循环  <pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(①初始化表达式 ; ②条件表达式 ; ④更新表达式)</span></span>&#123; ③语句...&#125;<span class="hljs-comment">//①--&gt;②--&gt;③--&gt;④</span></code></pre></li><li>break 与 continue  <blockquote><p>break可以用来退出switch或循环语句<br>continue可以跳过当次循环<br>不能再if语句中使用  </p></blockquote></li></ul><h2 id="5-小练习"><a href="#5-小练习" class="headerlink" title="5.小练习"></a>5.小练习</h2><ul><li>水仙花数  <blockquote><p>水仙花数是指一个3位数，它的每个位上的数字的3 次幂之和等于它本身。请打印所有的水仙花数。（例如：1^3 + 5^3 + 3^3 = 153）  </p></blockquote><pre><code class="hljs bash">var i,a,b,c;<span class="hljs-keyword">for</span>(i = 100;i &lt;= 999;i++) &#123;a = parseInt(i/100);//得到百位数ab = parseInt(i%100/10);//得到十位数bc = i%10;//得到个位数c<span class="hljs-keyword">if</span>(i == a*a*a + b*b*b + c*c*c) &#123;document.write(i+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);     &#125;&#125;</code></pre></li><li>九九乘法表<pre><code class="hljs matlab">var <span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>;<span class="hljs-keyword">for</span>(<span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>;<span class="hljs-built_in">i</span> &lt;= <span class="hljs-number">9</span>;<span class="hljs-built_in">i</span>++) &#123;<span class="hljs-keyword">for</span>( <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>;<span class="hljs-built_in">j</span> &lt;= <span class="hljs-built_in">i</span>;<span class="hljs-built_in">j</span>++) &#123;document.write(<span class="hljs-built_in">j</span> +<span class="hljs-string">&quot;*&quot;</span>+ <span class="hljs-built_in">i</span> +<span class="hljs-string">&quot;=&quot;</span>+ <span class="hljs-built_in">i</span>*<span class="hljs-built_in">j</span> +<span class="hljs-string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);&#125;document.write(<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);&#125;</code></pre></li><li>质数  <blockquote><p>打印出1-100间所有的质数</p></blockquote><pre><code>var i,j;for(i = 2;i &lt;= 100;i++) &#123;  var flag = true;  for(j = 2;j &lt;= Math.sqrt(i);j++) &#123;    //j最大值去根号下i      if(i % j == 0) &#123;      flag = false;      break;    //break优化      &#125;  &#125;  if(flag == true) &#123;  document.write(i+&quot;&lt;br/&gt;&quot;);  &#125;&#125;</code></pre></li></ul><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h2><p>前面学习的还是太慢了，记录的时候也不知道是详细一些好还是简单一些，就随便记了一下。算是了解一下如何写博客，希望自己能够养成学习的同时记录博客的好习惯。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客_note</title>
    <link href="/2020/08/23/Blog%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2020/08/23/Blog%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Blog-Tag"><a href="#Hexo-Blog-Tag" class="headerlink" title="Hexo Blog Tag"></a>Hexo Blog Tag</h1><h2 id="关于修改"><a href="#关于修改" class="headerlink" title="关于修改"></a>关于修改</h2><pre><code class="hljs bash">利用VScode打开 E:\1_Web前端\blog\<span class="hljs-built_in">source</span>\_data\fluid_config.yml 进行修改</code></pre><h2 id="关于保存"><a href="#关于保存" class="headerlink" title="关于保存"></a>关于保存</h2><pre><code class="hljs bash">打开Git Bashhexo g    hexo d    hexo s(启动本地服务器)</code></pre><h2 id="本地访问与编辑"><a href="#本地访问与编辑" class="headerlink" title="本地访问与编辑"></a>本地访问与编辑</h2><pre><code class="hljs bash">本地地址：http://localhost:4000在线编辑视窗：http://localhost:4000/admin （本地hexo博客地址 + admin即可）</code></pre><h6 id="相关网址："><a href="#相关网址：" class="headerlink" title="相关网址："></a>相关网址：</h6><p><a href="https://hexo.io/docs/">hexo官方文档</a><br><a href="https://hexo.fluid-dev.com/docs/">fluid用户文档</a><br><a href="https://imgchr.com/">路过图床</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
